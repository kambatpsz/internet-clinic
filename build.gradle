plugins {
	id 'java'
	id 'org.springframework.boot' version '3.0.0'
	id 'io.spring.dependency-management' version '1.1.4'
	id 'jacoco'
}

group = 'pl.kambat'
version = '1.0.0'

java {
	sourceCompatibility = '17'
}

jacoco {
	toolVersion = '0.8.11'
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter'
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'
	implementation 'org.springframework.boot:spring-boot-starter-validation'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-webflux'
	implementation 'org.springframework.boot:spring-boot-starter-security'

	implementation 'org.flywaydb:flyway-core'
	runtimeOnly 'org.postgresql:postgresql'

	compileOnly 'org.projectlombok:lombok'
	annotationProcessor 'org.projectlombok:lombok'

	implementation "org.mapstruct:mapstruct:1.5.5.Final"
	annotationProcessor "org.mapstruct:mapstruct-processor:1.5.5.Final"

	implementation "org.springdoc:springdoc-openapi-starter-webmvc-ui:2.0.0"

	// warning: unknown enum constant When.MAYBE
	// reason: class file for javax.annotation.meta.When not found
	implementation "com.google.code.findbugs:jsr305:3.0.2"


	//Test
	testRuntimeOnly 'com.h2database:h2'
	testCompileOnly 'org.projectlombok:lombok'
	testAnnotationProcessor 'org.projectlombok:lombok'
	testImplementation 'org.springframework.security:spring-security-test'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.testcontainers:junit-jupiter'
	testImplementation 'org.testcontainers:postgresql'

	// Integration tests
	testImplementation "org.slf4j:slf4j-api:2.0.5"
	testImplementation "com.github.tomakehurst:wiremock-standalone:2.27.2"
	testImplementation "io.rest-assured:rest-assured:5.3.0"
}

dependencyManagement {
	imports {
		mavenBom "org.testcontainers:testcontainers-bom:1.17.6"
	}
}

tasks.named('test') {
	useJUnitPlatform()
	testLogging {
		events "passed", "skipped", "failed"
	}
}

bootJar {
	archiveFileName = "internet-clinic.${archiveExtension.get()}"
}
jar{
	enabled= false;
}

jacocoTestReport {
	dependsOn test
}

compileJava.options.encoding = 'UTF-8'